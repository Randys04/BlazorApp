@page "/products"
@using BlazorApp_PlatziCourse.Models;
@using BlazorApp_PlatziCourse.Services;
@inject ILogger<Products> logger;
@inject IProductService productService;
@inject NavigationManager navigationManager;
@inject IJSRuntime JSRuntime;

<PageTitle>Products</PageTitle>

<ModuleTitle title="Products"/>

<button class="btn btn-dark" @onclick="@(()=> navigationManager.NavigateTo("/addproduct"))">Add product</button>

 <style>
	.products-container {
		display: grid;
		grid-template-columns: repeat(auto-fill, 280px);
		grid-auto-rows: auto;
		grid-gap: 1rem;
	}

</style> 

@if (productsList?.Count > 0)
{
	<div class="products-container">
		@foreach (var product in productsList)
		{
			<div class="card">
				<img class="card-img-top" src="@product?.Images?[0]" alt="Product" loading="lazy" width="270" height="210">
				<div class="card-body">
					<h4><b>@product?.Title</b></h4>
					<p>@product?.Price?.ToString("C")</p>
					<button title="Delete" class="btn btn-danger btn-delete" @onclick="@(() => DeleteProduct(product))"><span class="oi oi-trash"></span></button>
				</div>
			</div>
		}
	</div>
}
else
{
	<p>There are no products to display</p>
}

@code 
{
	private List<Product> productsList;

	protected override async Task OnInitializedAsync()
	{
		await GetProducts();
	}

	private async Task GetProducts()
	{
		productsList = await productService.GetProducts();
	}

	private async Task DeleteProduct(Product product)
	{
		if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Do you want to remove {product.Title}"))
		{
			return;
		}
		await productService.DeleteProducts(product.Id);
		await GetProducts();
	}
}
