@page "/editproduct/{productId?}"
@using BlazorApp_PlatziCourse.Services;
@using BlazorApp_PlatziCourse.Models;
@inject IProductService productService;
@inject ICategoryService categoryService;
@inject NavigationManager navigationManager;

<PageTitle>Edit product</PageTitle>

<button class="btn btn-dark" @onclick="@(()=> navigationManager.NavigateTo("/products"))">Go back</button>

<EditForm Model="@product" OnSubmit="@Edit">
    <div class="row">
        <div class="col-8 form-group">
            <label for="title" class="col-form-label">Title</label>
            <InputText id="title" @bind-Value="product.Title"  class="form-control" />
        </div>
        <div class="col form-group">
            <label for="price" class="col-form-label">Price</label>
            <InputNumber id="price" @bind-Value="product.Price" min="0"  class="form-control" />
        </div>
    </div>
    <div class="row">
        <div class="col form-group">
            <label for="category" class="col-form-label">Category</label>
            <InputSelect id="category" @bind-Value="product.CategoryId"  class="form-control">
                <option>Select Category...</option>
                @foreach (var category in categories)
                {
                    <option value="@category.Id">@category.Name</option>
                }
            </InputSelect>
        </div>
        <div class="col form-group">
            <label for="image" class="col-form-label">Image (Url)</label>
            <InputText id="image" @bind-Value="product.Image"  class="form-control" />
        </div>
    </div>
    <div class="form-group">
        <label for="description" class="col-form-label">Description</label>
        <InputTextArea id="description" @bind-Value="product.Description"  class="form-control"></InputTextArea>
    </div>

    <hr />
    <button class="btn btn-primary" type="submit">Save</button>

</EditForm>

@code {

    [SupplyParameterFromQuery]
    [Parameter]
    public int productId { get; set; }

    private List<Category> categories = new List<Category>();
    public Product product = new Product();

    protected override async Task OnInitializedAsync()
    {
        categories = await categoryService.GetCategories();
        product = await productService.GetProduct(productId);
    }

    private async Task Edit()
    {
        // product.Images = new string[1] { product.Image };
        // product.CategoryId = 1;
        await productService.EditProducts(product);
        navigationManager.NavigateTo("/products");
    }
}
